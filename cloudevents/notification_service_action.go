// Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
// Code generated. DO NOT EDIT.

// Event Control Service API
//
// API for managing event rules and actions.
// For more information, see Overview of Events (https://docs.us-phoenix-1.oraclecloud.com/iaas/Content/Events/Concepts/eventsoverview.htm).
//

package cloudevents

import (
	"encoding/json"
	"github.com/oracle/oci-go-sdk/common"
)

// NotificationServiceAction An action that delivers to an Oracle Notification Service topic.
type NotificationServiceAction struct {

	// The OCID (https://docs.us-phoenix-1.oraclecloud.com/iaas/Content/General/Concepts/identifiers.htm) of the action.
	Id *string `mandatory:"true" json:"id"`

	// A message generated by the Events service about the current state of this rule.
	LifecycleMessage *string `mandatory:"true" json:"lifecycleMessage"`

	// The OCID (https://docs.us-phoenix-1.oraclecloud.com/iaas/Content/General/Concepts/identifiers.htm) of the topic to which messages are delivered.
	TopicId *string `mandatory:"false" json:"topicId"`

	// The current state of the rule.
	LifecycleState ActionLifecycleStateEnum `mandatory:"true" json:"lifecycleState"`
}

//GetId returns Id
func (m NotificationServiceAction) GetId() *string {
	return m.Id
}

//GetLifecycleMessage returns LifecycleMessage
func (m NotificationServiceAction) GetLifecycleMessage() *string {
	return m.LifecycleMessage
}

//GetLifecycleState returns LifecycleState
func (m NotificationServiceAction) GetLifecycleState() ActionLifecycleStateEnum {
	return m.LifecycleState
}

func (m NotificationServiceAction) String() string {
	return common.PointerString(m)
}

// MarshalJSON marshals to json representation
func (m NotificationServiceAction) MarshalJSON() (buff []byte, e error) {
	type MarshalTypeNotificationServiceAction NotificationServiceAction
	s := struct {
		DiscriminatorParam string `json:"actionType"`
		MarshalTypeNotificationServiceAction
	}{
		"ONS",
		(MarshalTypeNotificationServiceAction)(m),
	}

	return json.Marshal(&s)
}
