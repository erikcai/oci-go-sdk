// Copyright (c) 2016, 2018, 2019, Oracle and/or its affiliates. All rights reserved.
// Code generated. DO NOT EDIT.

// Load Balancing API
//
// API for the Load Balancing service. Use this API to manage load balancers, backend sets, and related items. For more
// information, see Overview of Load Balancing (https://docs.cloud.oracle.com/iaas/Content/Balance/Concepts/balanceoverview.htm).
//

package loadbalancer

import (
	"github.com/oracle/oci-go-sdk/common"
)

// LbCookieSessionPersistenceConfigurationDetails The configuration details for implementing LB_COOKIE session persistence.
// Session persistence enables the Load Balancing Service to direct any number of requests that
// originate from a single logical client to a single backend web server.
// For more information, see Session Persistence (https://docs.cloud.oracle.com/Content/Balance/Reference/sessionpersistence.htm).
// In LB_COOKIE session persistence, a cookie is inserted by load balancer into the response with
// configured cookie parameters to enable session stickiness.
// NOTE: This configuration is mutually exclusive with `SessionPersistenceConfigurationDetails`
// (a.k.a APP_COOKIE session persistence) object. An error will be thrown if user attempts to enable
// both types of session persistence.
// To disable LB_COOKIE session persistence on a running load balancer, use the
// UpdateBackendSet operation and specify "null" for the
// `LBCookieSessionPersistenceConfigurationDetails` object.
// Example: `LBCookieSessionPersistenceConfigurationDetails: null`
type LbCookieSessionPersistenceConfigurationDetails struct {

	// The name of the cookie to be inserted by load balancer.
	// If this field is not configured, by default, load balancer inserts a cookie named "X-Oracle-BMC-LBS-Route"
	// Example: `example_cookie`
	// NOTE1: User should ensure the cookie name used at backend application servers is different from
	// that is being used at load balancer. To minimize the chances of collision, it is recommended
	// to use prefix like "X-Oracle-BMC-" for this field
	// NOTE2: If the name of cookie inserted by backend server and the load balancer happens to be the same,
	// the client/browser behavior would vary depending on the value of domain and path field associated
	// with the cookie i.e. If the name, domain and path of the Set-cookie generated by backend server
	// and the Set-cookie generated by load balancer are same, the clients/browser would treat them as one
	// cookie and send back only one of the cookie value in the subsequent requests. Whereas If only the
	// name of Set-cookie generated by backend server and the Set-cookie generated by load balancer is
	// same (with different domain and path names), then the clients/browsers would treat them as two
	// different cookies
	CookieName *string `mandatory:"false" json:"cookieName"`

	// Whether the load balancer is prevented from directing traffic from a persistent session client to
	// a different backend server if the original server is unavailable. Defaults to false.
	// Example: `false`
	DisableFallback *bool `mandatory:"false" json:"disableFallback"`

	// The domain in which the cookie will be valid. The Set-cookie header inserted by
	// load balancer will contain the domain attribute with value specified in this field.
	// There is no default value for this field. If this field is not configured, the
	// load balancer does not insert the domain attribute into the inserted Set-cookie header.
	// NOTE1: The client/browser behavior is described in rfc6265-HTTP State Management Mechanism
	// when the domain attribute is present or not present in Set-cookie header. In brief, for
	// example, if the value of the Domain attribute is "example.com" in Set-cookie header, the
	// client will include the same cookie in the Cookie header when making HTTP requests to
	// example.com, www.example.com, and www.abc.example.com. Whereas if Domain attribute is not
	// present, the client will return the cookie only for the domain to which the original
	// request was made.
	// NOTE2: Ensure the right domain value is configured in this field, otherwise the
	// client/browser may reject the cookie if the Domain attribute in Set-cookie does not
	// include the domain to which the original request was made. i.e. as specified in rfc6265,
	// the client will accept a cookie with a Domain attribute of "example.com" or
	// of "foo.example.com" from foo.example.com, but will not accept a cookie with
	// a Domain attribute of "bar.example.com" or of "baz.foo.example.com".
	// Example: `example.floyd.com`
	Domain *string `mandatory:"false" json:"domain"`

	// The path in which the cookie will be valid. The Set-cookie header inserted by
	// load balancer will contain the path attribute with value specified in this field.
	// Default value is "/"
	// NOTE1: The clients will include the cookie in an HTTP request only if the path
	// portion of the request-uri matches (or is a subdirectory of) the cookie's Path attribute.
	// Example: `/example`
	// Example: `/example/foo`
	Path *string `mandatory:"false" json:"path"`

	// The validity duration of the cookie in seconds. MUST be at least one second. The Set-cookie
	// header inserted by load balancer will contain the Max-Age attribute with the value
	// specified in this field.
	// There is no default value for this field. If this field is not configured, the
	// load balancer does not insert the Max-age attribute into the inserted Set-cookie
	// header and typically clients/browsers retain the cookie until the current session
	// is over as defined by clients.
	// Example: `3600`
	MaxAgeInSeconds *int `mandatory:"false" json:"maxAgeInSeconds"`

	// Set to true by default.
	// When this field is set to true, the Set-cookie header inserted by load balancer
	// will contain Secure attribute, which indicates the clients/browsers to send
	// this cookie only on secure transports
	// NOTE: If this field is set to to true, user can not associate this backend set
	// with any HTTP listeners.
	IsSecure *bool `mandatory:"false" json:"isSecure"`

	// Set to true by default.
	// When this field is set to true, the Set-cookie header inserted by load balancer
	// will contain HttpOnly attribute, which indicates the clients/browsers not to
	// leak this cookie via any java script channels.
	IsHttpOnly *bool `mandatory:"false" json:"isHttpOnly"`
}

func (m LbCookieSessionPersistenceConfigurationDetails) String() string {
	return common.PointerString(m)
}
